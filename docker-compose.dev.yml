version: '3.4'

x-logging-env: &logging-env
  hive_stack: ${COMPOSE_PROJECT_NAME}
  hive_service:

x-base-app: &base-app
  image: thebristolcable/beabee:${BEABEE_VERSION}
  env_file:
    - stack.env
  networks:
    - internal
    - db-network
  logging:
    driver: gelf
    options:
      gelf-address: "udp://127.0.0.1:12201"
      env: hive_stack,hive_service

x-app: &app
  <<: *base-app
  restart: unless-stopped
  depends_on:
    migration:
      condition: service_completed_successfully

services:
  migration:
    <<: *base-app
    command: 'npm run typeorm migration:run'
    environment:
      <<: *logging-env
      hive_service: migration

  app:
    <<: *app
    environment:
      <<: *logging-env
      hive_service: app

  api_app:
    <<: *app
    command: 'node built/api/app'
    environment:
      <<: *logging-env
      hive_service: api_app

  webhook_app:
    <<: *app
    command: 'node built/webhooks/app'
    environment:
      <<: *logging-env
      hive_service: webhook_app

  cron:
    <<: *app
    user: root
    command: 'crond -f -d 7'
    init: true
    environment:
      <<: *logging-env
      hive_service: cron

  img_upload_app:
    image: hascheksolutions/pictshare:72394f17
    restart: unless-stopped
    environment:
      CONTENTCONTROLLERS: IMAGE,TEXT
    init: true
    volumes:
      - upload_data:/var/www/data
    networks:
      - internal

  router:
    image: thebristolcable/router:${BEABEE_VERSION}
    restart: unless-stopped
    networks:
      - internal

  run:
    <<: *app
    profiles:
      - tools
    logging:
      driver: none

  frontend:
    image: thebristolcable/frontend:${BEABEE_VERSION}
    restart: unless-stopped
    environment:
      APP_BASE_URL: ${BEABEE_AUDIENCE}
      API_BASE_URL: /api/1.0
      CNR_MODE: ${BEABEE_CNR_MODE-}
    networks:
      - internal

  app_router:
    image: thebristolcable/app-router:${BEABEE_VERSION}
    restart: unless-stopped
    labels:
      - "traefik.docker.network=traefik-ingress"
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entryPoints=https"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${BEABEE_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.certResolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80"
    environment:
      LEGACY_APP_URL: http://router
      LEGACY_APP_COOKIE_DOMAIN: ${BEABEE_COOKIE_DOMAIN}
      FRONTEND_APP_URL: http://frontend
    networks:
      - internal
      - traefik-ingress

  mail:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    labels:
      - "traefik.docker.network=traefik-ingress"
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mail.entryPoints=https"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mail.rule=Host(`mail.${BEABEE_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-mail.tls.certResolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-mail.loadbalancer.server.port=8025"
    networks:
      - internal
      - traefik-ingress

networks:
  internal:
    driver: bridge
  db-network:
    external: true
  traefik-ingress:
    external: true

volumes:
  upload_data:
